@model List<ASPNETWebApp45.Models.Product>


@{
    ViewBag.Title = "Print QR Code";
}

<div class="row">

    @foreach (var product in Model)
    {
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card h-100">
                <img src="@QRcodeImgSrc(ViewBag.StoreItemPrefix + product.Id)" alt="" class="card-img-top" />
                <div class="card-body text-center">
                    <h5>@ViewBag.StoreItemPrefix@product.Id</h5>
                    <p>@product.Name</p>
                    <h4>@product.UnitPrice</h4>
                </div>
            </div>
        </div>
    }

</div>


@helper  QRcodeImgSrc(string qrText)
{
    Byte[] byteArray;
    var width = 250; // width of the Qr Code
    var height = 250; // height of the Qr Code
    var margin = 0;
    var qrCodeWriter = new ZXing.BarcodeWriterPixelData
    {
        Format = ZXing.BarcodeFormat.QR_CODE,
        Options = new ZXing.QrCode.QrCodeEncodingOptions
        {
            Height = height,
            Width = width,
            Margin = margin
        }
    };
    var pixelData = qrCodeWriter.Write(qrText);

    // creating a bitmap from the raw pixel data; if only black and white colors are used it makes no difference
    // that the pixel data ist BGRA oriented and the bitmap is initialized with RGB
    using (var bitmap = new System.Drawing.Bitmap(pixelData.Width, pixelData.Height, System.Drawing.Imaging.PixelFormat.Format32bppRgb))
    {
        using (var ms = new System.IO.MemoryStream())
        {
            var bitmapData = bitmap.LockBits(new System.Drawing.Rectangle(0, 0, pixelData.Width, pixelData.Height), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppRgb);
            try
            {
                // we assume that the row stride of the bitmap is aligned to 4 byte multiplied by the width of the image
                System.Runtime.InteropServices.Marshal.Copy(pixelData.Pixels, 0, bitmapData.Scan0, pixelData.Pixels.Length);
            }
            finally
            {
                bitmap.UnlockBits(bitmapData);
            }

            // save to folder
            //string fileGuid = Guid.NewGuid().ToString().Substring(0, 4);
            //bitmap.Save("wwwroot/qrr/file-" + fileGuid + ".png", System.Drawing.Imaging.ImageFormat.Png);

            // save to stream as PNG
            bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            byteArray = ms.ToArray();
        }
    }

    <text>data:image/png;base64,@Convert.ToBase64String(byteArray)</text>
}
